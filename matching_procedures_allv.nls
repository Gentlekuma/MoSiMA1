;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                         MATCHING PROCEDURES                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; procédure qui a chaque tour, lance la procédure d'appariement en fonction de la version voulue
to agents-matching
  ifelse matching_function [
    agents-matching_with_matching_function
  ] 
  [
    ifelse version = 1
    [
      agents-matching_v1
    ]
    [ ; pour les version 2 et 3 
       agents-matching_v2
    ]
  ]
  
end


; fonction qui calcule la similarité entre les compétences attendus par l'entreprise et celles possédées par le candidat
; renvoie un nombre entre 0 et 1
; elle renvoie le même résultat pour les agents PERSON et les agents COMPANY
to-report compute-similarity_skills [skills1 skills2]
  let counting 0
  (foreach skills1 skills2 [
    if ?1 = ?2 [
       set counting counting + 1
    ]
  ])
  report counting / length skills1

end

; fonction qui calcule la similarité entre les lieux de l'entreprise et du candidat
; renvoie un nombre entre 0 et 1
; elle renvoie le même résultat pour les agents PERSON et les agents COMPANY
to-report compute-similarity_location [location1 location2]
  ifelse location1 = location2
  [report 1]
  [report 0]
end

; fonction qui retourne la similarité entre les salaires
; renvoie un nombre entre 0 et 1
; elle renvoie le même résultat pour les agents PERSON et les agents COMPANY
; on veut que les salaires soient le plus proche possible : si le salaire proposé est trop élevé par rapport aux attentes de l'employé, c'est mauvais pour la similarité de celui-ci
to-report compute-similarity_salary [salary1 salary2]
  let max_value max List salary1 salary2
  let min_value min List salary1 salary2
  report 1 - (max_value - min_value) / max_value
end

