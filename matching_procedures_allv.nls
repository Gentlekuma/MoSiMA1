;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                         MATCHING PROCEDURES                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; procédure qui a chaque tour, lance la procédure d'appariement en fonction de la version voulue
to agents-matching
  ifelse version = 1
    [
      agents-matching_v1
    ]
    [
      ifelse version = 2 
        [
          agents-matching_v2
        ]
        [
          ;agents-matching_v3
        ]
    ]
  
end


; fonction qui calcule la valeur de la similarité du point de vue de l'employé
; renvoie un nombre entre 0 et 1
; actuellement les deux fonctions sont semblables, comme le veut l'article, mais il sera possible de les différencier pour améliorer le modèle par la suite
; on considère que la motivation exceptionnelle intervient à ce niveau pour faire augmenter les chances que la personne accepte ce travail
; elle a une probabilité d'arriver de exceptional_motivation_event
to-report compute-similarity-person [person company]
  let similarity_skills compute-similarity_skills [skills] of person [skills] of company
  let similarity_location compute-similarity_location [location] of person [location] of company
  let similarity_salary compute-similarity_salary [salary] of person [salary] of company
  let similarity (similarity_skills + similarity_location + similarity_salary) / 3
  if (random-float 1 < exceptional_motivation_event) [
    set similarity similarity + exceptional_worker_motivation
  ]
  report min List 1 similarity
end

; fonction qui calcule la valeur de la similarité du point de vue de l'entreprise
; renvoie un nombre entre 0 et 1
;actuellement les deux fonctions sont semblables, comme le veut l'article, mais il sera possible de les différencier pour améliorer le modèle par la suite
; on considère que la motivation exceptionnelle intervient à ce niveau pour faire augmenter les chances que l'entreprise accepte cet employé
; elle a une probabilité d'arriver de exceptional_motivation_event
to-report compute-similarity-company [person company]
  let similarity_skills compute-similarity_skills [skills] of company [skills] of person
  let similarity_location compute-similarity_location [location] of company [location] of person
  let similarity_salary compute-similarity_salary [salary] of company [salary] of person
  let similarity (similarity_skills + similarity_location + similarity_salary) / 3
  if (random-float 1 < exceptional_motivation_event) [
    set similarity similarity + exceptional_company_motivation
  ]
  report min List 1 similarity
end

; fonction qui calcule la similarité entre les compétences attendus par l'entreprise et celles possédées par le candidat
; renvoie un nombre entre 0 et 1
; elle renvoie le même résultat pour les agents PERSON et les agents COMPANY
to-report compute-similarity_skills [skills1 skills2]
  let counting 0
  (foreach skills1 skills2 [
    if ?1 = ?2 [
       set counting counting + 1
    ]
  ])
  report counting / length skills1

end

; fonction qui calcule la similarité entre les lieux de l'entreprise et du candidat
; renvoie un nombre entre 0 et 1
; elle renvoie le même résultat pour les agents PERSON et les agents COMPANY
to-report compute-similarity_location [location1 location2]
  ifelse location1 = location2
  [report 1]
  [report 0]
end

; fonction qui retourne la similarité entre les salaires
; renvoie un nombre entre 0 et 1
; elle renvoie le même résultat pour les agents PERSON et les agents COMPANY
; on veut que les salaires soient le plus proche possible : si le salaire proposé est trop élevé par rapport aux attentes de l'employé, c'est mauvais pour la similarité de celui-ci
to-report compute-similarity_salary [salary1 salary2]
  let max_value max List salary1 salary2
  let min_value min List salary1 salary2
  report 1 - (max_value - min_value) / max_value
end

