;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                      UPDATING JOBS AND PRODUCTIVITY                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; procédure qui a chaque tour, décide des productivités des employés et de si ils se font licencier ou non et, dans le cas de la version 2, si ils veulent démisionner
to update-jobs
  ask persons [
    set age age + 1
    if not strong-matching [
      if employed [
        set experience experience + 1
        ifelse version = 1 [
          let productivity compute-productivity
          if ( (random-float 1 <= exceptional_firing) or (productivity < minimum_productivity_required) ) [
            firing_procedure self employer
          ]
        ] 
        [ ; pour les version 2 et 3
          ifelse random_resignation [
            let productivity compute-productivity
            if ( (random-float 1 <= exceptional_firing) or (productivity < minimum_productivity_required) or (random-float 1 < random_resigning_threshold) ) [
              firing_procedure self employer
            ]
          ] 
          [
            let productivity compute-productivity
            let satisfaction compute-satisfaction employer
            if ( (random-float 1 <= exceptional_firing) or (productivity < minimum_productivity_required) or (satisfaction < [minimum_satisfaction_required] of self) ) [
              firing_procedure self employer
            ]
          ]
        ]
      ]
    ]
  ]
end

; fonction qui calcule la productivité d'une personne à chaque tour, basée sur sa productivité de référence
to-report compute-productivity   

  let temp reference_productivity + (random-float (2) - 1) * max_productivity_fluctuation * reference_productivity
  if temp > 1 [
    set temp 1
  ]
  if temp < 0 [
    set temp 0
  ]
  report temp
end


; fonction qui calcule la pstatisfaction d'un job à chaque tour, basé sur sa productivité de référence
; renvoie une valeur entre 0 et 1
to-report compute-satisfaction [company]  
  let reference_value [reference_satisfaction] of company
  let temp reference_value + (random-float (2) - 1) * max_satisfaction_fluctuation * reference_value
  if temp > 1 [
    set temp 1
  ]
  if temp < 0 [
    set temp 0
  ]
  report temp
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                            FIRING PROCEDURES                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; procédure de licenciement
; on met à jour les attributs des agents
to firing_procedure [person company]
  ask person [
    set color color-person-unemployed
    set employed False
    set employer nobody
    set job-time 0
    ask my-links [die]
  ]
  ask company [
    set experience_required [experience] of employee
    set color color-company-vacant-job
    set job_filled False
    set employee nobody
  ]
end
