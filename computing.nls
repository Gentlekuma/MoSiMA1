;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                         COMPUTING PROCEDURES                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to compute-values
  set unemployement_level count persons with [not employed]
  set vacancy_level count companies with [not job_filled]
  set unemployement_rate unemployement_level / labor_force
  set vacancy_rate vacancy_level / labor_force
end

;procédure qui met en mémoire les min(nb-of-step-remembered, ticks) derniers éléments en mémoire dans last-values-unemployement
to stock-last-values
  let temp fput unemployement_rate last-values-unemployement ;push to the beginning of the list
  if ticks >= nb-of-step-remembered [
    set temp but-last temp ;pop last element if list is of size nb-of-step-remembered
  ]
  set last-values-unemployement temp
end

; procédure qui surveille la convergence du système et met à jour la valeur du bolléen CONVERGENCE si il y a convergence
; critère : unemployement-level
; on calcul une moyenne glissante et on regarde si le nouveau résultat est proche ou non
to compute-convergence
  if ticks > nb-of-step-remembered [
    set moving-average mean last-values-unemployement
    
    if ( abs(moving-average - unemployement_rate) ) < moving-average * (converge-criteria / 100) [
      set convergence TRUE
      type "The market has converged at tick n° :" type ticks type "\n"
    ]
  ] 
    
  ; let variation-unemployement 0
  ;  let variation-vacancy 0
  ;  if not (mean last-values-unemployement = 0) [
  ;    set variation-unemployement (max last-values-unemployement - min last-values-unemployement) / mean last-values-unemployement
  ;  ]
  ;  if not (mean last-values-vacancy = 0) [
  ;    set variation-vacancy (max last-values-vacancy - min last-values-vacancy) / mean last-values-vacancy
  ;  ]
  ;  if variation-unemployement < convergence-margin and variation-vacancy < convergence-margin [
  ;    set convergence True;
  ;    type "le système a convergé au tick :" type ticks
  ;  ]
  ;]
end
